
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputFile
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import os

TOKEN = "7825237686:AAEHGbWwhHEFn7i_fqiU2v0yBmTUoORX1_I"
CHANNEL_USERNAME = "@Alex_prolager34"  # –Æ–∑–µ—Ä–Ω–µ–π–º –∫–∞–Ω–∞–ª–∞

USERS_FILE = "users.txt"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤ —Ñ–∞–π–ª, –µ—Å–ª–∏ –µ—â—ë –Ω–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω
    if not os.path.exists(USERS_FILE):
        with open(USERS_FILE, "w", encoding="utf-8") as f:
            f.write(f"{user_id}\n")
    else:
        with open(USERS_FILE, "r+", encoding="utf-8") as f:
            users = f.read().splitlines()
            if str(user_id) not in users:
                f.write(f"{user_id}\n")

    keyboard = [[InlineKeyboardButton("–ü–æ–µ—Ö–∞–ª–∏", callback_data="subscribe")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    text = (
        "üëã –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç –ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ê–ª—ë—à–µ—á–∫–∏–Ω.\n\n"
        "–Ø ‚Äî –¥–∏—Ä–µ–∫—Ç–æ—Ä –¥–µ—Ç—Å–∫–æ–≥–æ –Ω–∞—É—á–Ω–æ–≥–æ –ª–∞–≥–µ—Ä—è ¬´–ò–Ω—Ç–µ–≥—Ä–∞–ª¬ª. 15 –ª–µ—Ç —É–ø—Ä–∞–≤–ª—è—é –∫–æ–º–∞–Ω–¥–∞–º–∏, –∑–∞–ø—É—Å–∫–∞—é —Å–º–µ–Ω—ã, "
        "–∑–∞–∫–ª—é—á–∞—é –ø–∞—Ä—Ç–Ω—ë—Ä—Å—Ç–≤–∞ —Å –¥–µ—Ç—Å–∫–∏–º–∏ —Ü–µ–Ω—Ç—Ä–∞–º–∏ –ø–æ –≤—Å–µ–π —Å—Ç—Ä–∞–Ω–µ.\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç ‚Äî –ø—Ä–æ —Ç–æ, –∫–∞–∫ –Ω–µ —Ç–µ—Ä—è—Ç—å —Å–æ—Ç–Ω–∏ —Ç—ã—Å—è—á –Ω–∞ —É–ø—Ä–∞–≤–ª–µ–Ω—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö.\n\n"
        "üëá –ñ–º–∏ ¬´–ü–æ–µ—Ö–∞–ª–∏¬ª"
    )
    await update.message.reply_text(text, reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id

    if query.data == "subscribe":
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü–æ–¥–ø–∏—Å–∞–ª—Å—è", callback_data="check_subscription")],
            [InlineKeyboardButton("üîÑ –û—Ç–∫—Ä—ã—Ç—å –∫–∞–Ω–∞–ª", url="https://t.me/Alex_prolager34")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.message.reply_text(
            text=(
                "–ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Å–∫–∏–Ω—É PDF, –ø–æ–¥–ø–∏—à–∏—Å—å –Ω–∞ –º–æ–π –∫–∞–Ω–∞–ª:\n"
                "üëâ https://t.me/Alex_prolager34\n\n"
                "–ö–æ–≥–¥–∞ –ø–æ–¥–ø–∏—à–µ—à—å—Å—è ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:"
            ),
            reply_markup=reply_markup
        )

    elif query.data == "check_subscription":
        member = await context.bot.get_chat_member(chat_id=CHANNEL_USERNAME, user_id=user_id)
        if member.status in ("member", "administrator", "creator"):
            await query.message.reply_photo(
                photo="https://example.com/leadmagnet_preview.jpg",
                caption="‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª...",
            )
            with open("leadmagnet.pdf", "rb") as pdf:
                await query.message.reply_document(
                    document=pdf,
                    caption=(
                        "üìò *5 –æ—à–∏–±–æ–∫ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–µ –æ–±—Ö–æ–¥—è—Ç—Å—è –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Å–æ—Ç–Ω–∏ —Ç—ã—Å—è—á*\n\n"
                        "–ü—Ä–æ—á–∏—Ç–∞–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ ‚Äî —ç—Ç–æ —Å—ç–∫–æ–Ω–æ–º–∏—Ç —Ç–µ–±–µ –∫—É—á—É –¥–µ–Ω–µ–≥ –∏ –Ω–µ—Ä–≤–æ–≤."
                    ),
                    parse_mode="Markdown"
                )
        else:
            await query.message.reply_text("‚ùóÔ∏è–¢—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω –Ω–∞ –∫–∞–Ω–∞–ª. –ü–æ–¥–ø–∏—à–∏—Å—å –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if os.path.exists(USERS_FILE):
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            users = f.read().splitlines()
            count = len(users)
    else:
        count = 0
    await update.message.reply_text(f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –±–æ—Ç–µ: {count}")

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.")
    app.run_polling()
